{"version":3,"sources":["Star.js","MovieCard.js","MovieList.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Star","props","name","starCount","value","count","MovieCard","Container","className","Card","style","width","Img","variant","src","info","image","height","Body","Title","title","rating","MovieList","list","map","el","key","id","Search","state","nextValue","prevValue","this","setState","star","type","placeholder","onChange","e","search","target","onStarClick","bind","Component","App","add","newMovie","prompt","List","text","keyword","nbr","stars","x","n","filter","movie","toLowerCase","includes","trim","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7b12a9f.chunk.js","sourcesContent":["import React from 'react';\r\nimport StarRatingComponent from 'react-star-rating-component';\r\n \r\nconst Star = (props) => {    \r\n    return (                \r\n      <div>\r\n        <StarRatingComponent \r\n          name=\"rate1\" \r\n          starCount={5}\r\n          value={props.count}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\nexport default Star","import React from 'react'\r\nimport { Card, Container } from 'react-bootstrap'\r\nimport Star from './Star'\r\n\r\n\r\n\r\n\r\nconst MovieCard = (props) => {\r\n\r\n    return (\r\n        <Container className=\"movie-card\">\r\n        \r\n            \r\n            <Card className=\"card\" style={{ width: '215px' }}>\r\n                <Card.Img variant=\"top\" src={props.info.image} style={{ width: '215px', height: '290px' }} />\r\n                <Card.Body>\r\n                    <Card.Title>{props.info.title}</Card.Title>\r\n                    \r\n                    <Star count={props.info.rating} />\r\n\r\n                </Card.Body>\r\n            </Card>\r\n            \r\n        \r\n        </Container>\r\n    )\r\n}\r\nexport default MovieCard","import React from 'react'\r\n\r\nimport { Container } from 'react-bootstrap'\r\nimport MovieCard from './MovieCard'\r\n\r\n\r\nconst MovieList = (props) =>{\r\n    return (\r\n        <Container className=\"d-flex flex-row justify-content-start\">\r\n            <div className=\"movie-list\">\r\n                {props.list.map((el) => <MovieCard key={props.id} info={el} />)}\r\n            </div>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MovieList\r\n","import React, { Component } from 'react'\r\nimport StarRatingComponent from 'react-star-rating-component';\r\n\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rating: 1\r\n        }\r\n    }\r\n\r\n    onStarClick(nextValue, prevValue, name) {\r\n        this.setState({ rating: nextValue }, () => this.props.star(this.state.rating));\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"navbar\" >\r\n                <div className=\"input-search\">\r\n                    <input type=\"text\" name=\"lname\" placeholder=\"Type movie name to search\" onChange={(e) => this.props.search(e.target.value)} ></input>\r\n                    <button className=\"search\">Search</button>\r\n                </div>\r\n                <div className=\"rate\">\r\n                    <h2 className=\"text\">Minimum rating</h2>\r\n\r\n                    <StarRatingComponent\r\n                        name=\"rate1\"\r\n                        starCount={5}\r\n                        value={this.state.rating}\r\n                        onStarClick={this.onStarClick.bind(this)}\r\n                    />\r\n                </div>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Search","import React, { Component } from 'react';\nimport './App.css';\nimport MovieList from './MovieList'\nimport { Card, Button, Container } from 'react-bootstrap'\nimport Search from './Search';\n\n\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      List: [\n        {\n          id: 'Maleficent',\n          image: 'https://amc-theatres-res.cloudinary.com/image/upload/f_auto,fl_lossy,h_465,q_auto,w_310/v1565363492/amc-cdn/production/2/movies/53700/53730/PosterDynamic/87999.jpg',\n          title: 'Maleficent',\n          rating: 3\n        },\n        {\n          id: 'Scary Stories',\n          image: \"http://fr.web.img6.acsta.net/c_215_290/pictures/19/07/24/11/24/3992643.jpg\",\n          title: 'Scary Stories',\n          rating: 5\n        },\n        {\n          id: 'Drive',\n          image: \"https://m.media-amazon.com/images/M/MV5BYTZmOTY1MDAtOTYxOC00YTQ1LTlkNDUtMmJiZDEyYmE1YmRmXkEyXkFqcGdeQXVyODE5NzE3OTE@._V1_UY268_CR16,0,182,268_AL_.jpg\",\n          title: 'Drive',\n          rating: 2\n\n        },\n        {\n          id: 'El Cilencio Del Viento',\n          image: \"https://www.promenadesfilms.com/medias/promenadesfilms/Cartel%20El%20Silencio%20del%20Viento.jpg\",\n          title: 'El Cilencio Del Viento',\n          rating: 1\n\n        },\n        {\n          id: 'SArtemis Fowl',\n          image: \"https://upload.wikimedia.org/wikipedia/en/thumb/f/f4/Artemis_Fowl_poster.jpg/220px-Artemis_Fowl_poster.jpg\",\n          title: 'SArtemis Fowl',\n          rating: 4\n\n        },\n        {\n          id: 'Valerian',\n          image: \"https://media.services.cinergy.ch/media/box1600/2adad8d68850dd65b02425ea64c3c758955f22f6.jpg\",\n          title: 'Valerian',\n          rating: 3\n        }\n      ],\n      keyword : '',\n      stars : 1\n\n    }\n  }\n  add = () => {\n    var image = prompt('Movie Image')\n    var title = prompt('Movie Title')\n    var rating = prompt('Movie Rating')\n    var newMovie = { image, title, rating }\n    this.setState({ List: [...this.state.List, newMovie] })\n  }\n  search = text => {\n    this.setState({ keyword: text });\n  }\n  star = nbr => {\n    this.setState ({ stars: nbr });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Container className=\"container\">\n          <Search search={(x) => this.search(x)} star={(n) => this.star(n)}/>\n          <MovieList list={this.state.List.filter(movie => movie.title.toLowerCase().includes(this.state.keyword.toLowerCase().trim()) && movie.rating >= this.state.stars)} />\n          <Card className=\"ajout\" style={{ width: '215px', height: '290px' }}>\n            <Button variant=\"light\" onClick={this.add}>+</Button>\n          </Card>\n        </Container>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}